diff --git c/CMakeLists.txt w/CMakeLists.txt
new file mode 100644
index 0000000..0923527
--- /dev/null
+++ w/CMakeLists.txt
@@ -0,0 +1,11 @@
+project (Percy++)
+
+find_file(NTL_INCLUDE_DIR "NTL/")
+find_path(NTL_INCLUDE_PARENTDIR "NTL/")
+
+include_directories(${NTL_INCLUDE_DIR} ${NTL_INCLUDE_PARENTDIR})
+add_library(percyclient percyclient.cc percyparams.cc recover.cc rsdecoder.cc percyio.cc
+                FXY.cc gf2e.cc subset_iter.cc subset.cc portfolio.cc)
+add_library(percyserver percyserver.cc percyparams.cc datastore.cc percyio.cc gf2e.cc distserver.cc
+                threadedserver.cc cmdtools.cc)
+
diff --git c/gf2e.h w/gf2e.h
index 0635efc..7f22021 100644
--- c/gf2e.h
+++ w/gf2e.h
@@ -99,7 +99,7 @@ E interpolate_GF2E(const E *indices, const E *values,
         unsigned short numpoints, const E alpha) {
     E res;
 
-    E lagrange[numpoints];
+    E *lagrange = new E[numpoints];
     unsigned short i,j;
 
     for (i=0;i<numpoints;++i) {
@@ -118,6 +118,7 @@ E interpolate_GF2E(const E *indices, const E *values,
     for (i=0;i<numpoints;++i) {
         res ^= multiply_GF2E<E>(lagrange[i], values[i]);
     }
+    delete[] lagrange;
     return res;
 }
 
diff --git c/percyclient.cc w/percyclient.cc
index 5c85d48..09750c7 100644
--- c/percyclient.cc
+++ w/percyclient.cc
@@ -33,7 +33,7 @@
 #endif
 
 // Simple protected constructor for PercyClient
-PercyClient::PercyClient (PercyClientParams &params, nservers_t num_servers, 
+PercyClient::PercyClient (PercyClientParams &params, nservers_t num_servers,
 	nservers_t t) :
     params(params),
     num_servers(num_servers),
@@ -55,7 +55,7 @@ PercyClient::PercyClient (const PercyClient &other) :
 PercyClient::~PercyClient () {}
 
 // A factory method used to get a PercyClient for the given mode
-PercyClient * PercyClient::make_client (PercyClientParams &params, 
+PercyClient * PercyClient::make_client (PercyClientParams &params,
 	nservers_t num_servers, nservers_t t, sid_t * sids)
 {
     PercyClient * retptr = NULL;
@@ -117,7 +117,7 @@ nqueries_t PercyClient::fetch_blocks(vector<dbsize_t> block_numbers,
 
 nqueries_t PercyClient::fetch_blocks(vector<dbsize_t> block_numbers,
 	vector<ostream*> &osvec, vector<istream*> &isvec,
-	
+
 	vector<PercyBlockResults> &current_results)
 {
     vector<PercyBlockResults> dummy_previous;
@@ -135,10 +135,10 @@ void XOR_equal(unsigned char *dst, const unsigned char *src, unsigned const int
 }
 
 // Generate t-private (t+1)-of-l shares of a given secret value.
-// If a non-NULL pointer *polyp is provided, the random polynomial used is 
+// If a non-NULL pointer *polyp is provided, the random polynomial used is
 // copied to that address.
 static void genshares(nservers_t t, nservers_t l,
-        const vec_ZZ_p &indices, vec_ZZ_p &values, dbsize_t secret, 
+        const vec_ZZ_p &indices, vec_ZZ_p &values, dbsize_t secret,
         ZZ_pX *polyp = NULL)
 {
     // Pick a random polynomial of degree t
@@ -163,7 +163,7 @@ static void genshares(nservers_t t, nservers_t l,
 // ZZ_P CLASS
 
 // Constructor and destructor
-PercyClient_ZZ_p::PercyClient_ZZ_p (PercyClientParams &params, 
+PercyClient_ZZ_p::PercyClient_ZZ_p (PercyClientParams &params,
 	nservers_t num_servers, nservers_t t, sid_t * sids) :
     PercyClient(params, num_servers, t),
     indices(),
@@ -199,7 +199,7 @@ PercyClient_ZZ_p::~PercyClient_ZZ_p () {}
 
 // TODO
 //void PercyClient::choose_indices_ZZ_p (vec_ZZ_p * indices, sid_t *sids) {
-void PercyClient_ZZ_p::choose_indices (sid_t * sids) 
+void PercyClient_ZZ_p::choose_indices (sid_t * sids)
 {
     indices.SetLength(num_servers);
     for (nservers_t j = 0; j < num_servers; ++j) {
@@ -217,9 +217,9 @@ void PercyClient_ZZ_p::choose_indices (sid_t * sids)
                     for (nservers_t k = 0; k < j; ++k) {
                         if (indices[k] == r) {
                             ok = false;
-                        }   
-                    }   
-                }   
+                        }
+                    }
+                }
             } while (!ok);
             indices[j] = r;
         }
@@ -493,12 +493,10 @@ nqueries_t PercyClient_ZZ_p::process_replies(nservers_t h, vector<PercyBlockResu
 	return false;
     }
 
-    std::cerr << goodservers.size() << " of " << num_servers << " servers responded.\n";
-
     RSDecoder_ZZ_p decoder(params.get_p1(), params.get_p2());
 
     // Call the decoder's Recover method
-    bool res = decoder.Recover(bytes_per_word, t+tau, h, goodservers, answers, 
+    bool res = decoder.Recover(bytes_per_word, t+tau, h, goodservers, answers,
 	    indices, unfinished_results, decoded);
 
     // Convert the results to PercyBlockResults
@@ -513,7 +511,7 @@ nqueries_t PercyClient_ZZ_p::process_replies(nservers_t h, vector<PercyBlockResu
 	    for (dbsize_t i = 0; i < unfinished_results[q].size(); ++i) {
 		for (dbsize_t j = 0; j < words_per_block; ++j) {
 		    BytesFromZZ(sigma+(j*bytes_per_word),
-			    rep(unfinished_results[q][i].recovered[j]), 
+			    rep(unfinished_results[q][i].recovered[j]),
 			    bytes_per_word);
 		}
 		curr_block_res.results.push_back(PercyResult(unfinished_results[q][i].G,
@@ -538,7 +536,7 @@ nqueries_t PercyClient_ZZ_p::process_replies(nservers_t h, vector<PercyBlockResu
 // CHOR CLASS
 
 // Constructor and destructor
-PercyClient_Chor::PercyClient_Chor (PercyClientParams &params, 
+PercyClient_Chor::PercyClient_Chor (PercyClientParams &params,
 	nservers_t num_servers, nservers_t t) :
     PercyClient(params, num_servers, t),
     answers()
@@ -599,15 +597,15 @@ int PercyClient_Chor::send_request(vector<dbsize_t> block_numbers,
                 shares[(j*num_queries + q)*num_bytes + i] = RandomBits_ulong(8);
             }
         }
-        // Create a bytestring out of the block_numbers vector, storing it in the location of the 
+        // Create a bytestring out of the block_numbers vector, storing it in the location of the
         // final server's bytestring
         memset(shares + (last_server*num_queries+q)*num_bytes, '\0', num_bytes);
         unsigned int block_byte = (unsigned int) block_numbers[q] / 8;
         unsigned char block_pos = (unsigned char) block_numbers[q] % 8;
         unsigned char byte_val = 1 << (7 - block_pos);
         shares[(last_server*num_queries + q)*num_bytes + block_byte] = byte_val;
-        // Compute the final bytestring (such that the XOR of all the 
-	// server bytestrings is the bytestring 
+        // Compute the final bytestring (such that the XOR of all the
+	// server bytestrings is the bytestring
         // representing the query vector)
         for (nservers_t i = 0; i < last_server; i++) {
             XOR_equal(
@@ -657,7 +655,7 @@ nservers_t PercyClient_Chor::receive_replies(std::vector<istream*> &isvec)
         bool isgood = true;
         for (nqueries_t q=0; q<num_queries; ++q) {
             for (dbsize_t i = 0; isgood && i < words_per_block; ++i) {
-                isvec[j]->read((char *)(answers[q+previous_queries] 
+                isvec[j]->read((char *)(answers[q+previous_queries]
 			+ j*words_per_block + i), 1);
                 if ((dbsize_t)(isvec[j]->gcount()) < 1) {
                     // Mark this server as bad
@@ -678,8 +676,6 @@ nservers_t PercyClient_Chor::receive_replies(std::vector<istream*> &isvec)
     }
     requested_blocks.clear();
 
-    std::cerr << "Got replies...\n";
-
 //    for(nservers_t j = 0; j < num_servers; j++) {
 //    std::cerr << "Client: Server " << j << ": ";
 //    printBS_debug(answers+(j*num_queries+num_queries-1)*words_per_block, words_per_block);
@@ -703,8 +699,6 @@ nqueries_t PercyClient_Chor::process_replies (nservers_t h,
 	return num_queries;
     }
 
-    std::cerr << goodservers.size() << " of " << num_servers << " servers responded." << std::endl;
-
     if (goodservers.size() < num_servers) {
         std::cerr << "Not enough servers responded." << std::endl;
 	return num_queries;
diff --git c/percyserver.cc w/percyserver.cc
index f9b56fb..5be4376 100644
--- c/percyserver.cc
+++ w/percyserver.cc
@@ -46,7 +46,6 @@ bool PercyServer::handle_request(PercyServerParams &params, std::istream &is,
 	std::cerr << "No datastore!\n";
 	return false;
     }
-    std::cerr << "Receiving request..." << std::endl;
     if (params.get_mode() == MODE_GF28) {
         //return handle_request_GF28(params, is, os);
         return handle_request_GF2E<GF28_Element>(params, is, os);
diff --git c/percyserver.h w/percyserver.h
index f0b2f81..ff3e7a6 100644
--- c/percyserver.h
+++ w/percyserver.h
@@ -34,7 +34,7 @@ public:
     // Initialize a server with the given DataStore.
     PercyServer(DataStore * datastore) : byzantine(false),
 					 datastore(datastore) {}
-    ~PercyServer() {}
+    virtual ~PercyServer() {}
 
     // Tell the server to be Byzantine
     void be_byzantine() { byzantine = true; }
diff --git c/percytypes.h w/percytypes.h
index f64a50d..b8611d2 100644
--- c/percytypes.h
+++ w/percytypes.h
@@ -81,7 +81,17 @@
 //	#warning "Detected 64-bit build."
 
 	#define BUILD_64
-	#define _W160_OPT
+	#define _W160_OPT   
+	
+#ifdef __APPLE__
+#define off64_t off_t   
+#define mmap64 mmap
+#endif
+
+#ifdef __APPLE__
+#define off64_t off_t
+#define mmap64  mmap
+#endif
 
 	typedef uint32_t sid_t;
 	typedef uint64_t dbsize_t;
diff --git c/rsdecoder_impl.h w/rsdecoder_impl.h
index 5cb9aaf..ca2d2a4 100644
--- c/rsdecoder_impl.h
+++ w/rsdecoder_impl.h
@@ -2291,7 +2291,7 @@ bool cmp (const ZZ_pX& a, const ZZ_pX& b) {
 template<class F, class vec_F, class FX, class FXY, class mat_F>
 class cmpPolys {
 public:
-    bool operator() (const FX& a, const FX& b) {
+    bool operator() (const FX& a, const FX& b) const {
         if (a == b) {
             return false;
         }
diff --git c/threadedserver.cc w/threadedserver.cc
index ede4207..7d3c327 100644
--- c/threadedserver.cc
+++ w/threadedserver.cc
@@ -20,6 +20,7 @@
 #include <string.h>
 #include <sstream>
 #include <fstream>
+#include <unistd.h>
 #include <pthread.h>
 #include <sys/time.h>
 #include <sys/resource.h>
